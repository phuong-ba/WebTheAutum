import ExcelJS from "exceljs";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { message } from "antd";

export const downloadTemplate = async () => {
  try {
    const workbook = new ExcelJS.Workbook();
    const mainSheet = workbook.addWorksheet("M·∫´u kh√°ch h√†ng");
    const gioiTinhSheet = workbook.addWorksheet("Gi·ªõiTinh");

    const headers = [
      "T√™n kh√°ch h√†ng",
      "S·ªë ƒëi·ªán tho·∫°i",
      "Email",
      "Ng√†y sinh (yyyy-mm-dd) vd: 2000-01-30",
      "Gi·ªõi t√≠nh (1: nam, 0: n·ªØ)",
    ];
    mainSheet.addRow(headers);
    mainSheet.getRow(1).font = { bold: true };
    mainSheet.columns = headers.map(() => ({ width: 25 }));
    mainSheet.getColumn(4).numFmt = "@";
    // === D·ªØ li·ªáu dropdown cho gi·ªõi t√≠nh ===
    gioiTinhSheet.getCell("A1").value = 1;
    gioiTinhSheet.getCell("A2").value = 0;

    const maxRow = 100;
    for (let i = 2; i <= maxRow; i++) {
      mainSheet.getCell(`E${i}`).dataValidation = {
        type: "list",
        allowBlank: false,
        formulae: ["=Gi·ªõiTinh!$A$1:$A$2"],
        showDropDown: true,
      };
    }

    gioiTinhSheet.state = "veryHidden";

    const buffer = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buffer]), "MauNhapKhachHang.xlsx");
    message.success("‚úÖ File m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!");
  } catch (err) {
    console.error(err);
    message.error("‚ùå Kh√¥ng th·ªÉ t·∫°o file m·∫´u Excel.");
  }
};

export const importFromExcel = async (
  file,
  khachHangApi,
  fetchCustomers,
  setLoading
) => {
  if (!file) return;
  try {
    const data = await file.arrayBuffer();
    const workbook = XLSX.read(data);
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: "" });

    if (jsonData.length === 0) {
      message.warning("‚ö†Ô∏è File Excel kh√¥ng c√≥ d·ªØ li·ªáu!");
      return;
    }

    setLoading(true);

    for (const item of jsonData) {
      const newCustomer = {
        hoTen: item["T√™n kh√°ch h√†ng"],
        sdt: item["S·ªë ƒëi·ªán tho·∫°i"],
        email: item["Email"],
        ngaySinh: item["Ng√†y sinh (yyyy-mm-dd)"] || null,
        gioiTinh: item["Gi·ªõi t√≠nh (1: nam, 0: n·ªØ)"] == 1,
      };

      await khachHangApi.create(newCustomer);
    }

    message.success("‚úÖ Nh·∫≠p d·ªØ li·ªáu kh√°ch h√†ng t·ª´ Excel th√†nh c√¥ng!");
    fetchCustomers();
  } catch (err) {
    console.error(err);
    message.error("‚ùå L·ªói khi nh·∫≠p file Excel!");
  } finally {
    setLoading(false);
  }
};

// üîπ 3Ô∏è‚É£ XU·∫§T DANH S√ÅCH RA EXCEL
export const exportToExcel = async (data) => {
  try {
    const worksheetData = data.map((item) => ({
      "T√™n kh√°ch h√†ng": item.hoTen,
      "S·ªë ƒëi·ªán tho·∫°i": item.sdt,
      Email: item.email,
      "Ng√†y sinh (yyyy-mm-dd)": item.ngaySinh || "",
      "Gi·ªõi t√≠nh (1: nam, 0: n·ªØ)": item.gioiTinh ? 1 : 0,
    }));

    const worksheet = XLSX.utils.json_to_sheet(worksheetData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "KhachHang");

    const buffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
    saveAs(new Blob([buffer]), "DanhSachKhachHang.xlsx");

    message.success("‚úÖ ƒê√£ xu·∫•t danh s√°ch kh√°ch h√†ng!");
  } catch (err) {
    console.error(err);
    message.error("‚ùå Xu·∫•t Excel th·∫•t b·∫°i!");
  }
};
